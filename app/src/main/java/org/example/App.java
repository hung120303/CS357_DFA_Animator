/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import javax.swing.*;
import java.util.Set;
import java.util.HashSet;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {

        //Make the window
        JFrame lol = new JFrame("top text");
        lol.setVisible(true);
        lol.setSize(1000,1000);

        //Get some user input. Number of states, Alphabet, Transitions, starting state, accepting states
        int states = Integer.valueOf(JOptionPane.showInputDialog("Enter number of states (Min: 1; Max: 10): "));
        String sigma = JOptionPane.showInputDialog("Enter your alphabet (Use numbers (0-9), uppercase/lowercase letters (A-Z, a-z))(Ex: a, b, 1, ..., 0): ");
        String delta = JOptionPane.showInputDialog("Enter transitions (Ex: {(a, 1, 2), ... , (b, 2, 3)} ): ");
        int startState = Integer.valueOf(JOptionPane.showInputDialog("Enter the start state (0-" + (states - 1) + "): "));
        String accState = JOptionPane.showInputDialog("Enter the accepting state(s) (Ex: 0, ... , " + (states - 1) +"): ");


    }

    public static Set<Character> getAlphabet(String s){
        Set<Character> sigma = new HashSet<Character>(); 
        for(int i = 0; i < s.length(); i++){ //enumerate through each char element of the intput string
            char cur = s.charAt(i);
            if( ((int)cur > 47 && (int)cur < 58) || ((int)cur > 64 && (int)cur < 91) || ((int)cur > 96 && (int)cur < 123)){ // If ascii value is 0-9, A-Za-z
                    sigma.add(cur); //add char to sigma                
            }
        }
        return sigma;
    }
    public static Set<Integer> getAccStates(String s, int numStates){
        Set<Integer> qAcc = new HashSet<Integer>(); 
        for(int i = 0; i < s.length(); i++){ //enumerate through each char element of the intput string
            char cur = s.charAt(i);
            if( ((int)cur > 47 && (int)cur < 58) ){ // If ascii value is 0-9, A-Za-z
                    int add = cur - '0';
                    if(add < numStates){
                         qAcc.add(add); //add int to qAcc    
                    }
            }
        }
        return qAcc;
    }
    public static Set<Transition> getTransitions(String s, int numStates, Set<Character> sigma){
        Set<Transition> delta = new HashSet<Transition>(); 
            if(s.charAt(0) != 123){ //input should start with '{'
                return null; //This should be an error message for invalid format
            }
            int i = 1;
            while(i < s.length() || s.charAt(i) != 125){ //until reach end of string or hit '}'
                if((int)(s.charAt(i)) == 40){ // check for '('
                    char input = '~'; 
                    int from = -1;
                    int to = -1;
                    i++;
                    while((int)(s.charAt(i)) != 41){ //check for ')'
                        if(input == '~'){
                            if( ((int)(s.charAt(i)) > 47 && (int)(s.charAt(i)) < 58) || ((int)(s.charAt(i)) > 64 && (int)(s.charAt(i)) < 91) || ((int)(s.charAt(i)) > 96 && (int)(s.charAt(i)) < 123) ){
                                input = s.charAt(i);
                            }
                        }
                        else if(from == -1){
                            if( ((int)(s.charAt(i)) > 47 && (int)(s.charAt(i)) < 58) ){
                                from = s.charAt(i) - '0';
                            }                            
                        }
                        else if(to == -1){
                            if( ((int)(s.charAt(i)) > 47 && (int)(s.charAt(i)) < 58) ){
                                to = s.charAt(i) - '0';
                            }                            
                        }
                        i++;
                    }
                    if(input != '~' && from != -1 && to != -1){
                    delta.add(new Transition(input, from, to));
                    }
                }
                i++;
            }
        if(isValidTransitions(delta, numStates, sigma)){
            return delta;
        }
        else{
            return null; 
        }
    }

    public static boolean isValidTransitions(Set<Transition> t, int numStates, Set<Character> sigma){
        // there should be one of each alphabet transitions for each state
        
        

        // there should be (# of states) * (# of characters in alphabet) transitions
        
        return false;
    }
}
