/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import javax.swing.*;
import java.util.Set;
import java.util.HashSet;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        // Error class to check for valid input
        Error e = new Error();

        // Get user input for DFA configuration
        int states = e.promptStates();
        String sigma = JOptionPane.showInputDialog("Enter your alphabet (Use numbers (0-9), uppercase/lowercase letters (A-Z, a-z))(Ex: a,b,1,0): ");
        String delta = JOptionPane.showInputDialog("Enter transitions (Ex: {(a,0,1),(b,0,2),(a,1,1)}): ");
        int startState = Integer.parseInt(JOptionPane.showInputDialog("Enter the start state (0-" + (states - 1) + "): "));
        String accState = JOptionPane.showInputDialog("Enter the accepting state(s) (Ex: 0,1): ");

        Set<Character> sig = App.getAlphabet(sigma);
        Set<Transition> t = App.getTransitions(delta, states, sig);
        Set<Integer> acc = App.getAccStates(accState, states);

        // Validate the DFA configuration
        if (t == null) {
            JOptionPane.showMessageDialog(null, "Invalid transition table.");
            return;
        }

        // Create a Reader instance based on user input
        Reader reader = new Reader(states, sig, t, startState, acc);

        // Create and configure the JFrame to visualize the DFA
        JFrame frame = new JFrame("DFA Visualizer");
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.setSize(1000, 500); // Adjusted height for horizontal layout
        frame.setLocationRelativeTo(null);

        // Add DFADrawer to the frame and make it visible
        DFADrawer drawer = new DFADrawer(reader);
        frame.add(drawer);
        frame.setVisible(true);
    }




    public static Set<Character> getAlphabet(String s){
        Set<Character> sigma = new HashSet<Character>();
        for(int i = 0; i < s.length(); i++){ //enumerate through each char element of the intput string
            char cur = s.charAt(i);
            if( ((int)cur > 47 && (int)cur < 58) || ((int)cur > 64 && (int)cur < 91) || ((int)cur > 96 && (int)cur < 123)){ // If ascii value is 0-9, A-Za-z
                    sigma.add(cur); //add char to sigma
            }
        }
        return sigma;
    }
    public static Set<Integer> getAccStates(String s, int numStates){
        Set<Integer> qAcc = new HashSet<Integer>();
        for(int i = 0; i < s.length(); i++){ //enumerate through each char element of the intput string
            char cur = s.charAt(i);
            if( ((int)cur > 47 && (int)cur < 58) ){ // If ascii value is 0-9, A-Za-z
                    int add = cur - '0';
                    if(add < numStates){
                         qAcc.add(add); //add int to qAcc
                    }
            }
        }
        return qAcc;
    }
    public static Set<Transition> getTransitions(String s, int numStates, Set<Character> sigma){
        Set<Transition> delta = new HashSet<Transition>();
            if(s.charAt(0) != 123){ //input should start with '{'
                return null; //This should be an error message for invalid format
            }
            int i = 1;
            while(i < s.length()){ //until reach end of string
                if((int)(s.charAt(i)) == 40){ // check for '('
                    char input = '~';
                    int from = -1;
                    int to = -1;
                    i++;
                    while((int)(s.charAt(i)) != 41){ //check for ')'
                        if(input == '~'){
                            if( ((int)(s.charAt(i)) > 47 && (int)(s.charAt(i)) < 58) || ((int)(s.charAt(i)) > 64 && (int)(s.charAt(i)) < 91) || ((int)(s.charAt(i)) > 96 && (int)(s.charAt(i)) < 123) ){
                                input = s.charAt(i);
                            }
                        }
                        else if(from == -1){
                            if( ((int)(s.charAt(i)) > 47 && (int)(s.charAt(i)) < 58) ){
                                from = s.charAt(i) - '0';
                            }
                        }
                        else if(to == -1){
                            if( ((int)(s.charAt(i)) > 47 && (int)(s.charAt(i)) < 58) ){
                                to = s.charAt(i) - '0';
                            }
                        }
                        i++;
                    }
                    if(input != '~' && from != -1 && to != -1){
                        delta.add(new Transition(input, from, to));
                    }
                    else{
                        return null;
                    }
                }
                i++;
            }
        if(isValidTransitions(delta, numStates, sigma)){
            return delta;
        }
        else{
            System.out.println("This transiton table is smelly");
            return null;
        }
    }

    public static boolean isValidTransitions(Set<Transition> tTable, int numStates, Set<Character> sigma){
        // there should be one of each alphabet transitions for each state
        for(char c : sigma){
            int[] check = new int[numStates];
            for(Transition t: tTable){

                char curChar = t.getInput(); //We only care about the transtion symbol and the state it's coming from
                int curFrom = t.getFrom();

                if(curChar == c){
                    check[curFrom] += 1;
                }

            }
            for(int i: check){
                if(i != 1){
                    return false; //There is not a single transition for one symbol for one state (0 or more than 1)
                }
            }
        }

        // there should be (# of states) * (# of characters in alphabet) transitions
        if(tTable.size() != (numStates * sigma.size())){
            return false;
        }

        return true;
    }
}
